<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Vince</title><link>https://i.vince.pub/post/</link><description>Recent content in Posts on Vince</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 14 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://i.vince.pub/post/index.xml" rel="self" type="application/rss+xml"/><item><title>前端在线编辑博客，使用 Codespaces 搭建 Hexo 博客</title><link>https://i.vince.pub/p/hexo-codespaces/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/hexo-codespaces/</guid><description>前言 多数情况下，我们会选择将 Hexo 安装在本地，其中最大的痛点就是不能多设备同步和环境固定。之后，在 GitHub Actions 推出以后，我们可以将 Hexo 的 Source 文件保存，通过 CI 来部署我们的博客，这样的好处就是跨设备同步非常方便，但是预览上会遇到一些问题。现在，GitHub 的 Codespaces 推出后，Hexo 的纯前端编辑部署完全可以实现了。本篇介绍如何使用 Codespaces 搭建 Hexo 博客及几种部署方法。Codespces 还支持自动设置依赖关系、SSH 密钥。
安装 仓库及环境
创建一个新的仓库，由于我将静态资源也存放到这个仓库（之后会提及)，所以推荐使用公开库，如果需要使用私有库，需要将静态资源分离，放在一个公开库，创建之后打开 Codespaces。
接下来即可安装 Hexo，Codespaces 内置了 Node.js 和 Git，无需再安装相关应用程序。安装 Heox 文档，的相关内容，我们很快就可以完成安装。
npm install -g hexo-cli # 全局安装 Hexo。 hexo init blog # &amp;lt;folder&amp;gt; 这里以 blog 为例。 cd blog npm install 以上我们已经完成了 Hexo 的安装和建站，Hexo 的 Source 文件位于 /workspaces/hexo-codespaces-demo/blog 下。依据个人需求对配置项进行调整后便可以开始预览了。</description></item><item><title>Cloudflare Pages 试用及速度对比，以克隆 hexo-fluid-theme 官方博客为例</title><link>https://i.vince.pub/p/cloudflare-pages-test/</link><pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/cloudflare-pages-test/</guid><description>概述 从看到相关产品新闻后，还是非常期待这个产品的。我在去年12月订阅了 Cloudflare Pages 的相关消息，一直等到今天凌晨在接到了可以开始测试使用的邮件。相比与 Vercel 和 Netlify 等同类产品来说，Cloudflare Pages 的最多优势在于节点。在此之前，我相信很多就接触或者使用过 Cloudflare 的全球加速服务了。值得一提的是，相对来说 Cloudflare 的大陆节点确实还不少。
总结了一下，总共有以下几点特性，应该也算是该有的基本功能。团队协作，可以邀请加入 Cloudflare 帐户，以协作处理所有项目。快速构建，我们最常用到的 Git 集成，这也与版本管理相关联。目前已经支持大部分的框架和工具，具体可以 相关文档。最重要的是，提供的免费服务也足够我们的使用。
团队协作 快速构建 版本管理 免费高速 试用和对比
我们以克隆 Hexo Theme Fluid 官方博客来进行对比和试用。首先 Fork 仓库，官方博客使用 dogedoge 提供的图床，本来是想再做一个分支，做图片本地化及评论和统计的同步，但是太懒了。这里我们就不作修改的直接对比了，构建过程非常简单，hexo 和 hugo 这类的相关软件太普遍了，都有模板。
Cloudflare Pages 官方使用的 OSS
随便找了一个网站测速工具，从上图可以看出，Cloudflare Pages 在大陆下的访问速度还是比较快的，当然，实际情况还是可以自己对比的，另外，可能影响到的因素还有评论服务和访问统计。
官网站：https://hexo.fluid-dev.com/ 克隆站：https://hexo-fluid-blog.pages.dev/ - name: Upload to OSS env: OSS_AccessKeyID: ${{ secrets.OSS_AccessKeyID }} OSS_AccessKeySecret: ${{ secrets.</description></item><item><title>最简单的内网穿透，Zerotier 试用</title><link>https://i.vince.pub/p/zerotier/</link><pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/zerotier/</guid><description>前言 这里不得不吐槽一下学校，把一些仪器和教务管理系统设置在内网，必需通过校园网的环境下才能访问，然后无线网覆盖范围和信号状态及其虚拟专用网客户端长期不更新。之前有提到过，在宿舍购置了一台路由器，运行的是 OpenWrt。在宿舍中的路由器是可以访问校园网的，决定使用内网穿透解决这个问题。另外，深有体会，越好的大学信息服务越好,没有高考的同学加油。
开始使用 Zerotier 是一个开源软件，同时也被称谓傻瓜式的内网穿透软件。免费版即可支持50个设备，已经足够我的使用了。简单的说，注册完创建了 Network ID 后输入设备的客户端中，配置完路由规则后，即可开始使用了。
通过 SSH 安装 Zentier OpenWRT 使用 Opkg 来进行包管理，通过 Opkg 命令直接安装 Zentier 即可。
opkg install zentier 配置文件的路径是 /etc/config/zerotier，使用熟悉的编辑器对其进行配置即可，这里以 Vim 为例。部分路由器固件(例如 LuCI）内置了 Zentier,可以可视化操作。
vim /etc/config/zerotier 以我的配置为例，其中由于我的路由器内置了 Zerotier，设置 option nat 项允许 Zerotier 拨入客户端访问路由器 LAN 资源。之后，放行出入站数据。在 OpenWrt 的 网络-防火墙 中将 出站数据 和 入站数据 .
config zerotier &amp;#39;sample_config&amp;#39; option config_path &amp;#39;/etc/zerotier&amp;#39; list join &amp;#39;&amp;lt;your Network ID&amp;gt;&amp;#39; option enabled &amp;#39;1&amp;#39; option nat &amp;#39;1&amp;#39; 配置使用 在 Zerotier 网页配置 Managed Routes 中添加添加路由设置。以外网访问路由器管理页面（192.</description></item><item><title>校园网，我选择从路由器出手</title><link>https://i.vince.pub/p/ruijie-router/</link><pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/ruijie-router/</guid><description>无言以对的校园网政策 众所周知，某些学校的校园网完全就是一个商业项目，对使用有十分大的限制。比如我所在的学校，只运行一台设备在线，WLAN 和 LAN 需要选择一个，不能混用账号。然而，经过实测校园网分配给每个用户的物理带宽早就超过了百兆，足以够一个小型家庭使用，何况是一个宿舍。学校的这种做法无非是恰X钱。入学开始我就开始了对校园网的探索，起初的想法是路由器模拟设备镜像认证，因为有前人栽树的缘故，一切都进行的比较顺利。
对认证方式的分析 初探 初次登录，未进行认证的设备会重定向到登录界面，通过查看源代码，这不就是 Ruijie WEB Portal 接入认证。我觉得先到 Github 找一下例子，梳理一些思路。当我在 Github 搜索 Ruijie Portal 时，一个叫 RuijiePortalLoginTool 的项目让我发现，一切似乎都变的简单起来了。
实现原理
构造的关键便是这步，去年的时候我一直以为 Ruijie 会将主程序升级，然而我发现，像我校这种**，会一直为认证服务器使用出厂版本。
#Structure loginURL loginURL=`echo $loginPageURL | awk -F \? &amp;#39;{print $1}&amp;#39;` loginURL=&amp;#34;${loginURL/index.jsp/InterFace.do?method=login}&amp;#34; #Structure quertString queryString=`echo $loginPageURL | awk -F \? &amp;#39;{print $2}&amp;#39;` queryString=&amp;#34;${queryString//&amp;amp;/%2526}&amp;#34; queryString=&amp;#34;${queryString//=/%253D}&amp;#34; #Send Ruijie eportal auth request and output result if [ -n &amp;#34;$loginURL&amp;#34; ]; then authResult=`curl -s -A &amp;#34;Mozilla/5.0 (Windows NT 10.</description></item><item><title>从 Fluid 到 Stack</title><link>https://i.vince.pub/p/hugo-blog/</link><pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/hugo-blog/</guid><description>此前的博客 我换主题的几点原因：
审美疲劳（人总是会变的） 风格改变 在 V2EX 遇到了 Stack ∞ 总的来说主要原因还是想多尝试一下，在使用 Fluid 的过程中我学习到了很多东西，对于 Git 的使用就是在此过程中熟悉起来的。我不会放弃关注和使用 Fluid，依旧使用 Fluid 作为我的备用博客。
停更的几个月 在六月底开始，我就很少更新博客了。主要是因为我去做暑假工了，体验了一下实习生的工作，导致没有什么时间关注的博客这一块上面。开学以后，我又遇到了一些十分糟糕的事情，导致我对生活失去了信心。经过反复思考，我认为博客应该作为我生活一个部分，博客应该成为日常。最大的作用就是能够督促我进行学习，five 养成计划。对自我的认知上，我急需提升自己。
使用 Hugo 的过程遇到的问题 HTML 渲染 由于一些原因，在写博客的时候有习惯插入一些 HTML 片段，单纯 Markdown 语法渲染出的内容有些不够用。在 Markdown 文件中插入 HTML 片段后 HTML 片段无法加载，于是查看了源代码，HTML 片段前出现 &amp;lt;!--raw Html omitted--&amp;gt;，随即查找了官方文档发现了问题所在，Hugo 在最近的版本中使用了 Glodmark 作为默认库，出于安全考虑，默认状态下不加载 HTML 片段。于是就有了两个方法，一是开启不安全设置，二是换回 Blackfriday 库，我认为前者为最佳方案。
在配置文件 config.toml 中添加以下配置即可，以上问题算是解决了。
[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true 使用 FTP-Deploy-Action 推送文件时的问题 我将 Hugo 的 Source 文件存放在 Github 的一个仓库中，使用 Github Actions 进行渲染及推送到服务器上，但流程执行完毕后，服务器仍然没有相关文件，同时在运行的过程中没有进行报错。</description></item><item><title>对主站和博客的一些思考</title><link>https://i.vince.pub/p/blog-thinking/</link><pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/blog-thinking/</guid><description>对文字的思考 在很久以前，我也算半个文章工作者了，只不过是业余的。我在 Remix OS 论坛和智友（安智）论坛当过一段时间的版主，做的比较多的还是教程类和评测类的帖子，但是我的拍照水平太差和无钱购置摄影设备，导致评测写的非常烂。有一次体脂秤的评测，某版主就来和我说，做评测不是和写说明书一样的东西，建议回炉。我思考了一下，评测评测，就是点评和测试，我认为在完成以上内容的基础上，对产品的的功能做一些科普并不是一件坏事。这件事也是导致我退出那个论坛的一个导火索，他们眼中所谓高质量的评测就是好图和使劲夸产品，其实就是恰饭了。
到现在，我觉得泛普类视频是现在受众程度比较高的一类视频了。毕竟现在大家都心知肚明，所谓的评测其实就是个笑话。简单的说，基于这种模式，厂商提供设备送测，不可能是来“找骂”的吧。到后来，也和朋友一起运营过公众号表哥说，主打可穿戴类的评测和新闻，后来因为水平有限和可穿戴市场的萎缩，也不了了之了。我认为我和文字还是有一些缘分的，帖子和公众号文章再到现在的博客，算是一种懒惰的坚持。
选择的平台 几年前，还在论坛时代，我们的写作大部分都基于论坛下，这也是 Discuz 最火的那段时间了。现在自建博客可以说是越来越多了，自建博客对于大多数人来说，还是一种展示的媒介，无论是对日后找工作的帮助还是个人能力的展示，这都是一种趋势。在访客量极低的情况下，自建博客作为我们的垃圾桶和锻炼的平台。趋向于分享类，我觉得在小有名气之前，还是需要选择一个更大的平台，比较还可以带来一些收益。
对博客的思考 在经历了两个论坛都 GG 的情况下，我的所有帖子之前自己也没用备份，这对于我来说是巨大的损失，这些帖子不仅见证了我的成长，也是我对以前的一些回忆吧。这样，自建博客就变得非常有必要了。以及以后我会将博文内容备份在 Github 上，这样理论上就永不遗失了。
对于毫无名气的博客来说，每天能有10个 IP 就已经不错了，我认为在此阶段下，写博客的关键不是在于访问量，而是鞭策自己，无论阅读数与否，写好才有人看，也为自己添加一份阅历。
TO DO 图片储存规范化 Banner 配图 持续写作 文章规范化</description></item><item><title>健康最为重要，记一次体检心得</title><link>https://i.vince.pub/p/health-condtion/</link><pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/health-condtion/</guid><description>一次偶然的体检 一开始我对转氨酶根本没有概念，只有在献血和高考体检的时候遇到过，这次体检没想到转氨酶太高了，我原本以为自己非常健康的。后来去门诊看了一下医生，还排查了一下病毒，好在没什么事情，医生说应该是长期熬夜、体重超重和不规律饮食引起的，开了一些护肝药给我，并且给了一些建议。
什么是转氨酶 内容来自丁香医生1，转氨酶是一系列酶的总称，主要包括丙氨酸氨基转移酶（谷丙转氨酶 ALT）、天冬氨酸氨基转移酶（谷草转氨酶 AST）、碱性磷酸酶、谷氨酰基转移酶和乳酸脱氢酶这五种。总的来说，我觉得还是自己的锅。
拒绝太“肝” 忌滥用药物 忌乱用补品 忌油腻饮食 忌睡眠不规律 忌不规律饮食 我好像除了滥用药物、乱用补品都中招了，我反思了一下，也许还和体重超重有问题。
我的计划 🏃‍ 慢跑 💪 减脂减重 🛌 作息规律 🍀 拒绝油腻 希望可以自律一点，“自律给我自由”。另外，如果有看到这篇文章的朋友们，如果也有以上恶习，建议改正，拒绝“肝”出来。
一次偶然的体检 一开始我对转氨酶根本没有概念，只有在献血和高考体检的时候遇到过，这次体检没想到转氨酶太高了，我原本以为自己非常健康的。后来去门诊看了一下医生，还排查了一下病毒，好在没什么事情，医生说应该是长期熬夜、体重超重和不规律饮食引起的，开了一些护肝药给我，并且给了一些建议。
什么是转氨酶 内容来自丁香医生1，转氨酶是一系列酶的总称，主要包括丙氨酸氨基转移酶（谷丙转氨酶 ALT）、天冬氨酸氨基转移酶（谷草转氨酶 AST）、碱性磷酸酶、谷氨酰基转移酶和乳酸脱氢酶这五种。总的来说，我觉得还是自己的锅。
拒绝太“肝” 忌滥用药物 忌乱用补品 忌油腻饮食 忌睡眠不规律 忌不规律饮食 我好像除了滥用药物、乱用补品都中招了，我反思了一下，也许还和体重超重有问题。
我的计划 🏃‍ 慢跑 💪 减脂减重 🛌 作息规律 🍀 拒绝油腻 希望可以自律一点，“自律给我自由”。另外，如果有看到这篇文章的朋友们，如果也有以上恶习，建议改正，拒绝“肝”出来。
「丁香医生」转氨酶正常，就代表肝脏功能没有问题吗？作者：尹嘉钰（ https://dxy.com/column/7494 ） &amp;#x21a9;&amp;#xfe0e;</description></item><item><title>常见静态网站托管平台使用及多节点部署方案</title><link>https://i.vince.pub/p/hexo-static/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/hexo-static/</guid><description>前言 对于 Hexo 来说，我们使用它来部署博客是因为无后端运维和高速渲染页面等优点。选择一个合适的托管平台对于博客来说十分重要，可以免费使用且稳定高速的平台是不存在的，我们总是需要做出妥协。我使用了 Github Pages、Coding Pages、Gitee Pages、Netlify 和 Vercel 来部署博客，以下为我的使用报告。
常见托管平台 节点
Github Pages 使用体验：可以与仓库无缝对接，高效部署，但是没用设置国内节点，在国内访问速度较慢，作为一个海外节点还是非常不错的。相对而言，使用 jsdelivr 来加速网站相关文件可以满足基本使用。查看 Github Status，Pages 服务会出现偶尔挂掉的情况，但多数仓库文档、演示等都选择了 Github Pages 服务。
使用及扩展：提供二级域名，支持域名绑定及免费 SSL 证书。网站内容与仓库保存一致，自动推送。通过使用 Github Actions 具有较强扩展性。
Netlify 使用体验：Netlify 的节点设置在海外，但 Netlify 的服务速度尚可，国内部分地区可以到达高速服务。在使用 CDN 的情况下，把网站部署在 Netlify 是可以比较好的选择。Vuejs 和 Hexo 的官网都部署在 Netlify 上，其稳定性可想而知。Netlify 虽然拥有付费功能，但是基本上我们需要使用到的服务都免费。
使用及扩展：提供二级域名，支持域名绑定及免费 SSL 证书。Netlify 支持 Github 或者 Gitlab 等账号登录，如果仓库已经是静态网站文件，每次 Push 到仓库 Netlify 都会自动部署。支持 Build Command，源文件也可以通过提供的环境自动编译或渲染，类似于一款 CI，与 Github Pages 功能相近。
Vercel 使用体验：Vercel 的体验情况总体和 Netlify 相近，节点设置在海外，访问速度尚可。前身是 now.</description></item><item><title>个人免费建站，使用 Cloud Studio 建立个人博客</title><link>https://i.vince.pub/p/fluid-write/</link><pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/fluid-write/</guid><description>前言 Fluid 是一款很十分优雅的主题，那么写一篇优雅的文章搭配它呢？以下会从几个方面来简述，主要还是做几个推荐。
文章内容 熟悉 Markdown 语法 对于使用 Hexo 的大多数人来说，相信对 Markdown 的语法不会陌生。熟练掌握 Markdown 语法对我们的写作拥有极大的帮助，这里用少用的表格和脚注来举个例子。至于为什么有些公式、流程图无法渲染，是因为 Markdown 追求简洁式写作，默认渲染器不支持复杂渲染。
表格 站点 地址 介绍 FluidDocs https://hexo.fluid-dev.com/docs/ Fluid官方文档 Hexo-theme-fluid https://github.com/fluid-dev/hexo-theme-fluid FluidGithub Repo Fluid Blog https://hexo.fluid-dev.com/ Fluid官方博客 站点|地址|介绍 --|:--:|--: FluidDocs|https://hexo.fluid-dev.com/docs/|Fluid官方文档 Hexo-theme-fluid|https://github.com/fluid-dev/hexo-theme-fluid|FluidGithub Repo Fluid Blog|https://hexo.fluid-dev.com/|Fluid官方博客 脚注(仅默认渲染器可用) 脚注演示1
脚注演示[^footnote] [^footnote]: 脚注内容演示 善用 HTML 我们可以在 Markdown 中插入一些简单的 HTML 代码或 CSS 片段来获得更多扩展，使得文章内容更具有多样性。以下演示几个简单功能。
跳转位置演示（跳转位置设置点）文字颜色 #519D9E颜色演示&amp;lt;span style=&amp;#34;color: #519D9E; &amp;#34;&amp;gt;#519D9E颜色演示&amp;lt;/span&amp;gt; 文字大小 0.</description></item><item><title>Hexo-Action-TencentCloudBase</title><link>https://i.vince.pub/p/hexo-action-tencentcloudbase/</link><pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/hexo-action-tencentcloudbase/</guid><description>Hexo-Action-TencentCloudBase 通过 Github Actions，使用 Hexo-Action-TencentCloudBase 可以将 Hexo 的源文件部署并推送到 Tencent CloudBase 的静态托管中。
🚀 使用 由于 Github Pages 在国内的访问速度，可以使用 Tencent CloudBase 来托管相关静态网页。Hexo-Action-TencentCloudBase 可以通过 Github Actions 将 Hexo 的源文件推送到Tencent CloudBase 的静态托管中。显目地址：Hexo-Action-TencentCloudBase
在仓库中添加 Repo/.github/workflows/tencent.yml ，相关文件即可。更多关于 Github Actions ，请点击这里查看。
🔐 腾讯云相关输入内容 在项目的 secret 添加 ENV_ID SECRET_ID SECRET_KEY 相关字段。
SECRET_ID # Required 云开发的访问密钥 secretId
SECRET_KEY # Required 云开发的访问密钥 secretKey
ENV_ID # Required 云开发的环境 id envId
✔ 使用内容及灵感来源 实例
cloudbase-action
action-hexo</description></item><item><title>Fluid 文档相关 PR 内容原稿</title><link>https://i.vince.pub/p/fluid-doc-pr/</link><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/fluid-doc-pr/</guid><description>前言 本篇记录在 Fluid 文档中自己 PR 的内容原稿，持续更新中。
在 Fluid 使用更多图标的详细过程 说明 Fluid 在2020/4/5之前的版本使用的图标库是 FontAwesome，在之后的版本使用 Iconfont。相对而言，Iconfont 更适合我们的使用习惯，但是在 Iconfont 中，没用相关图标库项目共享功能，且主题作者也不能内置全部图标，只内置了部分社交图标，不过据了解，后续会更新更多图标。这篇帖子主要介绍如何引入更多图标，另外内容已经 PR 到 Fluid Doc 中。
关于 font-class 引用 主题图标使用 font-class 引用，font-class 是 unicode 使用方式的一种变种，比起 unicode 更加便捷和直观。iconfont 支持在线引用和本地引用。以下内容基于 font-class 引用。
本地应用 首先需要获取图标的 CSS 文件，将文件放到主题目录 &amp;lsquo;source/css&amp;rsquo; 中，在主题配置文件 custom_css 项中添加 CSS 文件路径。
实例
custom_css: /css/custom.css 在相关文件、页面，将 icon- 开头的那行填入 css class 即可。比如： iconfont icon-email 。
Iconfont 在线引用 Iconfont支持用户创建项目来管理和使用图标库，在 图标管理-我的项目 中即可管理和创建项目。将所需图标添加至购物车，再通过购物车添加至所创建的项目中。在项目中可以下载至本地与生成在线链接，Iconfont 支持在阿里云的 CDN 中生成 CSS 或 JS 文件用来调用。</description></item><item><title>关于智能手表操作系统的一些浅见</title><link>https://i.vince.pub/p/smart-watch/</link><pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/smart-watch/</guid><description>结论 先说结论，如果没有大量的用户基数和对应用开发的扶持，我认为这种独立基于 Android 开发系统的模式，不是很可观。（仅代表个人观点，回答如有错误欢迎指出）
先来聊聊历史的这种模式 早些年，当 moto 360 一代面世时，很多人都被这种腕间上的智能所吸引。由于没有在国内上市，我们所能购买到的渠道有淘宝、直邮海淘等，这款手表使用 Android Wear（Wear OS 的前身），那时候还没有中国版的 Android Wear ，如果使用一些基础服务都要爬上梯子，这对使用体验和续航会造成很大的影响。之后，Ticwear 适配了 moto 360 一代 ，但是由于它是无线充电，意味着刷表必须拆表，还必须有刷机线。就这样，淘宝也衍生出了代刷业务和直接卖刷好的表。这也是我最早接触到但这种独立开发模式的手表，然而问题出现了，刷了 Ticwear 软件的生态太不如从前，但是可以满足在国内日常使用。
放眼之前，BAT 都布局过手表系统。百度的 Du Wear、腾讯的 TOS for watch 、阿里巴巴的 Yun OS for watch 。都是这种模式的手表系统，但是现在都已经停摆了。现在，我们常见市面上这种模式的手表系统，就是华米手表的 WOS 。举个不好的例子，土曼手表 T-Ripple 3 也是这种模式，但它的系统体验真的不尽人意， app 体验也非常糟糕，这家公司如今的现状大家都清楚，当然这里我不是否认这种模式，参照观点。因为现在，做好这种模式的公司，体验也还不错，比如华米和华为（华为前期是使用 Android Wear ，现在转变为自己的手表系统），当然还有一家不得不提的大公司三星，搭载 Tizen OS 的智能手表在市场也有一定的份额。除了公司体量以外，我认为用户基数和对应用开发的扶持对体验起到决定性作用。
另外一种常见的模式 现在的 ticwatch ，使用 Wear OS 和搭配自己客户端来使用。首先，这可能是一种战略选择，出门问问获得过谷歌的投资，和谷歌也有合作，你会发现之前大部分的 Andorid Wear ，大部分语言搜索引擎都是出门问问。其次，在 ticwear 时期，推出过兼容 Android Wear 应用的模式，但是大大提高了功耗。为什么使用 Wear OS 呢？我认为最大的原因是较为强大的生态， Wear OS 经过多年强大但深耕，虽然没有 Apple Watch 那样强大的生态，但还是有些积累。但像微信手表端，我记得很清楚早期 ticwear 要在兼容 Android Wear 应用的模式下使用（因为微信手表端是传输协议是 Wear OS 的私有协议），后来推出了一个魔改网页版微信的应用。</description></item><item><title>Chrome OS 体验与常用环境</title><link>https://i.vince.pub/p/my-chromebook/</link><pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/my-chromebook/</guid><description>Chrome OS 体验与常用环境，或许我们应该对它改观（Pixelbook 体验）。由于文字内容过多，本文为原创，直接给出知乎链接，以后的文章应该会更新到本站。 点击这里查看文章</description></item><item><title>个人免费建站，使用 Cloud Studio 建立个人博客</title><link>https://i.vince.pub/p/cloud-studio-static/</link><pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate><guid>https://i.vince.pub/p/cloud-studio-static/</guid><description>由于文字内容过多，不便发布在这里，文章为原创，直接给出知乎链接，以后的文章会更新到本站。（由于 Cloud Studio 已经升级，该方法可能已经失效) 点击这里查看文章</description></item></channel></rss>