[{"content":"前言 与云开发的渊源 其实我算是云开发比较早的用户，最早开始使用云开发是在去年，参加了云开发的静态网站托管赞助计划。这一切都要从个人博客的部署说起，我相信 GitHub Page 是很多人对静态托管的启蒙，有一个先吃饱再吃好的循序渐进的步骤，访问速度在后期也成为选择部署的主要考虑因素，通过赞助计划开始接触到云开发的各项服务。\n最早是通过 cloudbase-action 这个插件将博客推送到云开发的静态托管，但是由于 GitHub Actions 的 Runner 的局限性，部署过程中网络环境有很大的局限性。这也是第一个版本，第二个版本借助了 CloudBase Framework 的赋能。在这里我也有感觉，webify 的灵感也有一些来自这里。\nWebify Serverless 模式最近一直很火热，我个人对云开发的理解就是做中国的 Vercel，在 Vercel 和 Cloudflare Pages 面前，还是很开心国内也有做一款类似的产品。在我看来，Webify 提供的是一个一站式的解决方法，现在这种方式下，每次 Push 后剩下的一套流程都不需要我动手了（例如静态页面生成、部署和 CDN 配置等），这应该是个人博客及网站比较理想的一个方法。\n体验  \nWebify 目前支持了主流的托管平台和绝大多数的网站框架模板，使用过程就不再累赘，OAuth 授权之后，导入仓库即可，对已支持的模板还可以进行自动识别，整个操作来说算是十分顺畅。\n \n部署完成后会发现在静态托管中会多一个环境，这就是 Webify 部署过来静态资源。其实我简单的理解把它当作 静态托管 + CloudBase Framework 的结合。这样也解决了之前说到的一个痛点，GitHub Actions 的 Runner 因为网络环境带来的问题。之前需要使用 GitHub Actions 这样的 CI/CD 能力来构建部署网站，Webify 就是赋予了这样一种能力。\nHugo 的部署  \n目前的 Webify 还没有支持 hugo 的摸板，交流群里@王伟嘉也给出了将 hugo 的可执行二进制文件（linux64）放到项目里，在构建的时候调用运行这样的方法。Webify 支持自定义构建配置，这样的方法确实非常好。但我用了另一种思路，借助 GitHub Actions 的能力，构建生成到另一个仓库或主分支，再由 Webify 的空模板配置去部署。这样的方法相对而言有些“听君一席话，如听一席话的感觉”，但我觉得这也是一个比较简单的解决方案。\nname:Deploy to Sync-repoon:push:branches:- mainjobs:deploy:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2.3.2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.79.1\u0026#39;extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}external_repository:vinceying/vince-blog-syncpublish_branch:mainpublish_dir:./public我相信后期 Webify 的模板是越来越多的，它也支持自定义构建配置。但我认为，这或许也是一个思路，对于 Webify 来说，模板是许许多多的，所以开放自定义构建配置，当对于入门或追求方便的使用来说，面对各种各样的网站架构和功能，GitHub Actions 上的模板及资源，或许可以成为我们构建的好帮手。\n","date":"2021-10-10T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/webify/2021-10-10150621.png","resource":{},"title":"Webify 使用体验及 hugo 部署实例"},{"content":"前言 多数情况下，我们会选择将 Hexo 安装在本地，其中最大的痛点就是不能多设备同步和环境固定。之后，在 GitHub Actions 推出以后，我们可以将 Hexo 的 Source 文件保存，通过 CI 来部署我们的博客，这样的好处就是跨设备同步非常方便，但是预览上会遇到一些问题。现在，GitHub 的 Codespaces 推出后，Hexo 的纯前端编辑部署完全可以实现了。本篇介绍如何使用 Codespaces 搭建 Hexo 博客及几种部署方法。Codespces 还支持自动设置依赖关系、SSH 密钥。\n安装 仓库及环境    \n创建一个新的仓库，由于我将静态资源也存放到这个仓库（之后会提及)，所以推荐使用公开库，如果需要使用私有库，需要将静态资源分离，放在一个公开库，创建之后打开 Codespaces。\n \n接下来即可安装 Hexo，Codespaces 内置了 Node.js 和 Git，无需再安装相关应用程序。安装 Heox 文档，的相关内容，我们很快就可以完成安装。\nnpm install -g hexo-cli # 全局安装 Hexo。 hexo init blog # \u0026lt;folder\u0026gt; 这里以 blog 为例。 cd blog npm install 以上我们已经完成了 Hexo 的安装和建站，Hexo 的 Source 文件位于 /workspaces/hexo-codespaces-demo/blog 下。依据个人需求对配置项进行调整后便可以开始预览了。\n   \nhexo clean hexo s hexo s 后便可以通过 Codespaces 提供的网站来预览博客了。Codespaces 的一大亮点就是可以将 Local Address 映射到公网，这样我们就可以通过这个功能来预览主题和修改了。\n主题安装 这里以 hexo-theme-fluid 为例来安装主题，使用 git clone 来克隆主题文件。之后根据自己的需求来调整配置项，关于 hexo 和主题的配置，这里就不再累赘了。\ncd themes # 位于 /workspaces/hexo-codespaces-demo/blog 下。 git clone https://github.com/fluid-dev/hexo-theme-fluid.git 部署 这里主要写了 hexo deploy 和一些 JAMStack 的平台的部署，关于部署到服务器和 OSS 等平台就不多累赘了，可以通过 GitHub Action 来实现。\n使用 hexo deploy 来部署 Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到仓库上。这个部署多用于在 GitHub 等代码托管平台上，用于使用相关的 Page 服务。注意，每次做出改动都需要手动部署生效。\n安装 hexo-deployer-git 插件。\nnpm install hexo-deployer-git --save 在 _config.yml 中修改 deploy 配置项。\ndeploy:type:gitrepository:\u0026lt;repository url\u0026gt;# demo:git@github.com:vinceying/hexo-codespaces-demo.gitbranch:[branch]message:[message]hexo clean # hexo 三连 hexo g hexo d 使用 Vercel 或 Netlify 等 JAMStack 平台部署 使用此类平台部署选择对应仓库即可，但是由于 Hexo 源文件没有在根目录，注意填写 ROOT DIRECTORY 项，比如这里填写 blog。\n写在最后 使用 Codespace 的最大有点在于多设备使用、预览和方便快捷（自动设置依赖关系、SSH 密钥等）。使用 Codespace 可以跨平台，且没有本地依赖的相关。\n关于 Static 文件夹 之前也有提及，创建这个文件夹主要是使用 JSdelivr 来对静态资源进行加速，放在同一个仓库完全是为了方便管理。\nFork 使用 你可以通过查看 README 来了解如何快捷使用。\n","date":"2021-05-14T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/hexo-codespaces/20210515152919.png","resource":{},"title":"前端在线编辑博客，使用 Codespaces 搭建 Hexo 博客"},{"content":"概述 从看到相关产品新闻后，还是非常期待这个产品的。我在去年12月订阅了 Cloudflare Pages 的相关消息，一直等到今天凌晨在接到了可以开始测试使用的邮件。相比与 Vercel 和 Netlify 等同类产品来说，Cloudflare Pages 的最多优势在于节点。在此之前，我相信很多就接触或者使用过 Cloudflare 的全球加速服务了。值得一提的是，相对来说 Cloudflare 的大陆节点确实还不少。\n总结了一下，总共有以下几点特性，应该也算是该有的基本功能。团队协作，可以邀请加入 Cloudflare 帐户，以协作处理所有项目。快速构建，我们最常用到的 Git 集成，这也与版本管理相关联。目前已经支持大部分的框架和工具，具体可以 相关文档。最重要的是，提供的免费服务也足够我们的使用。\n 团队协作 快速构建 版本管理 免费高速  试用和对比    \n我们以克隆 Hexo Theme Fluid 官方博客来进行对比和试用。首先 Fork 仓库，官方博客使用 dogedoge 提供的图床，本来是想再做一个分支，做图片本地化及评论和统计的同步，但是太懒了。这里我们就不作修改的直接对比了，构建过程非常简单，hexo 和 hugo 这类的相关软件太普遍了，都有模板。\n Cloudflare Pages   官方使用的 OSS \n随便找了一个网站测速工具，从上图可以看出，Cloudflare Pages 在大陆下的访问速度还是比较快的，当然，实际情况还是可以自己对比的，另外，可能影响到的因素还有评论服务和访问统计。\n 官网站：https://hexo.fluid-dev.com/ 克隆站：https://hexo-fluid-blog.pages.dev/  - name: Upload to OSS env: OSS_AccessKeyID: ${{ secrets.OSS_AccessKeyID }} OSS_AccessKeySecret: ${{ secrets.OSS_AccessKeySecret }} run: | wget -q http://gosspublic.alicdn.com/ossutil/1.6.10/ossutil64 chmod +x ./ossutil64 ./ossutil64 config -e oss-ap-southeast-1.aliyuncs.com -i $OSS_AccessKeyID -k $OSS_AccessKeySecret -L CH ./ossutil64 cp -r -f oss://fluid-dev/docs ./public/ ./ossutil64 rm -r -f oss://fluid-dev/ ./ossutil64 cp -r -f ./public oss://fluid-dev/ 另外，从 hexo-fluid-theme 仓库的 Github Actions 代码可以看出，官方博客部署的阿里云 OSS 上，Ping 一下，主要有香港和美国两个节点。\n节点  \n截至目前，从 Cloudflare System Status 来看，在中国总共有23个节点，其中包含21个大陆节点，香港和台北各一个。在 Cloudflare 的全球节点支持下，相当于我们部署了全球 CDN，对于一个免费的产品来说，这完全足够我们使用了。\n利用 Cloudflare Pages 分发静态资源 在此之前，我们通常使用 jsdelivr 来分发静态资源，选择静态文件仓库，无构建命令即可。\n加载对比 以一张图片为例，可以复制到浏览器打开，体验相关速度。在我的环境下，Cloudflare 是不如 JSdelivr 的加载。实际效果请自行对比。\n对比组一，图片大小：1.44 MB。\n JSdelivr Cloudflare  对比组二，图片大小：336 KB。\n JSdelivr Cloudflare  写在最后 Cloudflare Pages 速度不一定优于其它平台，取决于地区和网络环境等等诸多因素，具体效果请自行测试。 Cloudflare Pages 做镜像站也是一个不错的选择，玩法多多，不妨尝试一下。\n","date":"2021-03-06T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/cloudflare-pages-test/Cloudflare%20Pages_hero.png","resource":{},"title":"Cloudflare Pages 试用及速度对比，以克隆 hexo-fluid-theme 官方博客为例"},{"content":"前言 这里不得不吐槽一下学校，把一些仪器和教务管理系统设置在内网，必需通过校园网的环境下才能访问，然后无线网覆盖范围和信号状态及其虚拟专用网客户端长期不更新。之前有提到过，在宿舍购置了一台路由器，运行的是 OpenWrt。在宿舍中的路由器是可以访问校园网的，决定使用内网穿透解决这个问题。另外，深有体会，越好的大学信息服务越好,没有高考的同学加油。\n开始使用 Zerotier 是一个开源软件，同时也被称谓傻瓜式的内网穿透软件。免费版即可支持50个设备，已经足够我的使用了。简单的说，注册完创建了 Network ID 后输入设备的客户端中，配置完路由规则后，即可开始使用了。\n通过 SSH 安装 Zentier OpenWRT 使用 Opkg 来进行包管理，通过 Opkg 命令直接安装 Zentier 即可。\nopkg install zentier 配置文件的路径是 /etc/config/zerotier，使用熟悉的编辑器对其进行配置即可，这里以 Vim 为例。部分路由器固件(例如 LuCI）内置了 Zentier,可以可视化操作。\nvim /etc/config/zerotier 以我的配置为例，其中由于我的路由器内置了 Zerotier，设置 option nat 项允许 Zerotier 拨入客户端访问路由器 LAN 资源。之后，放行出入站数据。在 OpenWrt 的 网络-防火墙 中将 出站数据 和 入站数据 .\nconfig zerotier \u0026#39;sample_config\u0026#39; option config_path \u0026#39;/etc/zerotier\u0026#39; list join \u0026#39;\u0026lt;your Network ID\u0026gt;\u0026#39; option enabled \u0026#39;1\u0026#39; option nat \u0026#39;1\u0026#39; 配置使用 在 Zerotier 网页配置 Managed Routes 中添加添加路由设置。以外网访问路由器管理页面（192.168.2.1）为例。其中我的 IP 段为 10.10.10.1~10.10.10.225 。\n10.10.10.0/24 (LAN) # 系统默认 192.168.2.0/24 Via 10.10.10.171 # 简要的意思访问路由器管理页面时使用路由器进行 之后通过其它设备安装 Zerotier 客户端，填入 Network ID 后，在网页配置中运行相关设计即可。\n总结  这篇有偷懒成分，流水账试用过程（文章凑数）。 不同版本和固件版本使用可能存在差异，以实际为准。 受网络环境的局限较大，不同网络环境下情况不同。在我的使用中，访问网页需求基本上可以满足，但是如果使用想通过此方法访问本地 NAS 的数据，我觉得实现起来不太理想。  ","date":"2020-12-18T00:00:00Z","permalink":"https://i.vince.pub/p/zerotier/","title":"最简单的内网穿透，Zerotier 试用"},{"content":"无言以对的校园网政策 众所周知，某些学校的校园网完全就是一个商业项目，对使用有十分大的限制。比如我所在的学校，只运行一台设备在线，WLAN 和 LAN 需要选择一个，不能混用账号。然而，经过实测校园网分配给每个用户的物理带宽早就超过了百兆，足以够一个小型家庭使用，何况是一个宿舍。学校的这种做法无非是恰X钱。入学开始我就开始了对校园网的探索，起初的想法是路由器模拟设备镜像认证，因为有前人栽树的缘故，一切都进行的比较顺利。\n对认证方式的分析 初探 初次登录，未进行认证的设备会重定向到登录界面，通过查看源代码，这不就是 Ruijie WEB Portal 接入认证。我觉得先到 Github 找一下例子，梳理一些思路。当我在 Github 搜索 Ruijie Portal 时，一个叫 RuijiePortalLoginTool 的项目让我发现，一切似乎都变的简单起来了。\n实现原理  \n构造的关键便是这步，去年的时候我一直以为 Ruijie 会将主程序升级，然而我发现，像我校这种**，会一直为认证服务器使用出厂版本。\n#Structure loginURL loginURL=`echo $loginPageURL | awk -F \\? \u0026#39;{print $1}\u0026#39;` loginURL=\u0026#34;${loginURL/index.jsp/InterFace.do?method=login}\u0026#34; #Structure quertString queryString=`echo $loginPageURL | awk -F \\? \u0026#39;{print $2}\u0026#39;` queryString=\u0026#34;${queryString//\u0026amp;/%2526}\u0026#34; queryString=\u0026#34;${queryString//=/%253D}\u0026#34; #Send Ruijie eportal auth request and output result if [ -n \u0026#34;$loginURL\u0026#34; ]; then authResult=`curl -s -A \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36\u0026#34; -e \u0026#34;$loginPageURL\u0026#34; -b \u0026#34;EPORTAL_COOKIE_USERNAME=; EPORTAL_COOKIE_PASSWORD=; EPORTAL_COOKIE_SERVER=; EPORTAL_COOKIE_SERVER_NAME=; EPORTAL_AUTO_LAND=; EPORTAL_USER_GROUP=%E5%AD%A6%E7%94%9F%E5%8C%85%E6%9C%88; EPORTAL_COOKIE_OPERATORPWD=;\u0026#34; -d \u0026#34;userId=$2\u0026amp;password=$3\u0026amp;service=$interface\u0026amp;queryString=$queryString\u0026amp;operatorPwd=\u0026amp;operatorUserId=\u0026amp;validcode=\u0026amp;passwordEncrypt=false\u0026#34; -H \u0026#34;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\u0026#34; -H \u0026#34;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#34; \u0026#34;$loginURL\u0026#34;` echo $authResult fi 使用 首次使用    \n去年刚入学时，出于谨慎，我在二手市场花了20块买了个二手极路由，用于网络的测试。一切都非常顺利，刷入 OpenWrt 后，开启路由器的 SSH，然后上传脚本，运行即可。我原本以为会花了我很多时间去解决这个问题，没想到还是非常快的。但是路由器性能的原因，加上我有很多设备以及宿舍公用，路由器经常满载和死机，需要重启来解决。文档中也有提及，使用 Cron 来定时运行脚本，但是由于使用习惯，我更加倾向于断网后路由器断电。\nsh /filepath/ruijie.sh usename password 使用快捷指令运行脚本 在不使用 Cron 定时任务的情况下，我需要每次都使用 SSH 连接路由器然后运行脚本。得益于快捷指令 APP，快捷指令支持 SSH 连接，这一切又变的简单起来了。\n \n新路由器，Redmi AC2100 前面也有提及，因为之前只是想做一个实验性的操作，选择了价格实惠，翻车也可接受的20元二手极路由，但是由于宿舍设备增加，在校半年，疫情半年，今年是时候换新了。逛了一下恩山，最后发现 AC2100 还是真香的。\n不过 AC2100 不带 USB 端口，这旧以为着刷机没有那么简单了。在没有漏洞的情况下，拆机刷机是唯一选择。恩山老哥还是非常稳的，不拆机教程还是有的。比起以前刷个 Breed，然后刷固件难度确实增加了很多。简单的步骤就是通过后门开启 telnet，获取 root 权限，刷写固件，这里就不累赘了，恩山有非常详细的教程。\n","date":"2020-10-21T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/ruijie-router/thomas-jensen-UrtxBX5i5SE-unsplash.jpg","resource":{},"title":"校园网，我选择从路由器出手"},{"content":"此前的博客 我换主题的几点原因：\n 审美疲劳（人总是会变的） 风格改变 在 V2EX 遇到了 Stack ∞  总的来说主要原因还是想多尝试一下，在使用 Fluid 的过程中我学习到了很多东西，对于 Git 的使用就是在此过程中熟悉起来的。我不会放弃关注和使用 Fluid，依旧使用 Fluid 作为我的备用博客。\n停更的几个月 在六月底开始，我就很少更新博客了。主要是因为我去做暑假工了，体验了一下实习生的工作，导致没有什么时间关注的博客这一块上面。开学以后，我又遇到了一些十分糟糕的事情，导致我对生活失去了信心。经过反复思考，我认为博客应该作为我生活一个部分，博客应该成为日常。最大的作用就是能够督促我进行学习，five 养成计划。对自我的认知上，我急需提升自己。\n使用 Hugo 的过程遇到的问题 HTML 渲染 由于一些原因，在写博客的时候有习惯插入一些 HTML 片段，单纯 Markdown 语法渲染出的内容有些不够用。在 Markdown 文件中插入 HTML 片段后 HTML 片段无法加载，于是查看了源代码，HTML 片段前出现 \u0026lt;!--raw Html omitted--\u0026gt;，随即查找了官方文档发现了问题所在，Hugo 在最近的版本中使用了 Glodmark 作为默认库，出于安全考虑，默认状态下不加载 HTML 片段。于是就有了两个方法，一是开启不安全设置，二是换回 Blackfriday 库，我认为前者为最佳方案。\n在配置文件 config.toml 中添加以下配置即可，以上问题算是解决了。\n[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true 使用 FTP-Deploy-Action 推送文件时的问题 我将 Hugo 的 Source 文件存放在 Github 的一个仓库中，使用 Github Actions 进行渲染及推送到服务器上，但流程执行完毕后，服务器仍然没有相关文件，同时在运行的过程中没有进行报错。\nname:github pageson:push:branches:- main # Set a branch to deployjobs:deploy:runs-on:ubuntu-18.04steps:- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.75.1\u0026#39;# extended: true- name:Buildrun:hugo --minify- name:FTP-Deploy-Actionuses:SamKirkland/FTP-Deploy-Action@3.1.1with:ftp-server:ftp-serverftp-username:usernameftp-password:${{ secrets.FTP_PASSWORD_BLOG }}local-dir:./public反复检查工作流文件后，我发现并没有什么明显的错误，查看 log 后基本上可以把问题定位在 FTP-Deploy-Action 的步骤上。\n If you don\u0026rsquo;t commit your build folder to github you MUST create a .git-ftp-include file with the content !build/ so the folder is always uploaded!\n 查阅文档后发现，./public 中文件是在流程中生成的，并不是在仓库中的文件，需要添加 .git-ftp-include 文件后方可推送。思路上，我决定将./public 中文件推送到一个新的参考，然后在新的仓库使用 FTP-Deploy-Action。这样做的好处是可以使用 Github Pages 增加一个海外镜像网站（虽然没人看）。\n","date":"2020-10-06T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/hugo-blog/gryffyn-m-OdoW3-o62EM-unsplash.jpg","resource":{},"title":"从 Fluid 到 Stack"},{"content":"对文字的思考 在很久以前，我也算半个文章工作者了，只不过是业余的。我在 Remix OS 论坛和智友（安智）论坛当过一段时间的版主，做的比较多的还是教程类和评测类的帖子，但是我的拍照水平太差和无钱购置摄影设备，导致评测写的非常烂。有一次体脂秤的评测，某版主就来和我说，做评测不是和写说明书一样的东西，建议回炉。我思考了一下，评测评测，就是点评和测试，我认为在完成以上内容的基础上，对产品的的功能做一些科普并不是一件坏事。这件事也是导致我退出那个论坛的一个导火索，他们眼中所谓高质量的评测就是好图和使劲夸产品，其实就是恰饭了。\n到现在，我觉得泛普类视频是现在受众程度比较高的一类视频了。毕竟现在大家都心知肚明，所谓的评测其实就是个笑话。简单的说，基于这种模式，厂商提供设备送测，不可能是来“找骂”的吧。到后来，也和朋友一起运营过公众号表哥说，主打可穿戴类的评测和新闻，后来因为水平有限和可穿戴市场的萎缩，也不了了之了。我认为我和文字还是有一些缘分的，帖子和公众号文章再到现在的博客，算是一种懒惰的坚持。\n选择的平台 几年前，还在论坛时代，我们的写作大部分都基于论坛下，这也是 Discuz 最火的那段时间了。现在自建博客可以说是越来越多了，自建博客对于大多数人来说，还是一种展示的媒介，无论是对日后找工作的帮助还是个人能力的展示，这都是一种趋势。在访客量极低的情况下，自建博客作为我们的垃圾桶和锻炼的平台。趋向于分享类，我觉得在小有名气之前，还是需要选择一个更大的平台，比较还可以带来一些收益。\n对博客的思考 在经历了两个论坛都 GG 的情况下，我的所有帖子之前自己也没用备份，这对于我来说是巨大的损失，这些帖子不仅见证了我的成长，也是我对以前的一些回忆吧。这样，自建博客就变得非常有必要了。以及以后我会将博文内容备份在 Github 上，这样理论上就永不遗失了。\n对于毫无名气的博客来说，每天能有10个 IP 就已经不错了，我认为在此阶段下，写博客的关键不是在于访问量，而是鞭策自己，无论阅读数与否，写好才有人看，也为自己添加一份阅历。\nTO DO  图片储存规范化 Banner 配图 持续写作 文章规范化  -未完待续-\n","date":"2020-07-11T00:00:00Z","permalink":"https://i.vince.pub/p/blog-thinking/","title":"对主站和博客的一些思考"},{"content":"一次偶然的体检 一开始我对转氨酶根本没有概念，只有在献血和高考体检的时候遇到过，这次体检没想到转氨酶太高了，我原本以为自己非常健康的。后来去门诊看了一下医生，还排查了一下病毒，好在没什么事情，医生说应该是长期熬夜、体重超重和不规律饮食引起的，开了一些护肝药给我，并且给了一些建议。\n什么是转氨酶 内容来自丁香医生1，转氨酶是一系列酶的总称，主要包括丙氨酸氨基转移酶（谷丙转氨酶 ALT）、天冬氨酸氨基转移酶（谷草转氨酶 AST）、碱性磷酸酶、谷氨酰基转移酶和乳酸脱氢酶这五种。总的来说，我觉得还是自己的锅。\n拒绝太“肝”  忌滥用药物 忌乱用补品 忌油腻饮食 忌睡眠不规律 忌不规律饮食  我好像除了滥用药物、乱用补品都中招了，我反思了一下，也许还和体重超重有问题。\n我的计划  🏃‍ 慢跑 💪 减脂减重 🛌 作息规律 🍀 拒绝油腻  希望可以自律一点，“自律给我自由”。另外，如果有看到这篇文章的朋友们，如果也有以上恶习，建议改正，拒绝“肝”出来。\n一次偶然的体检 一开始我对转氨酶根本没有概念，只有在献血和高考体检的时候遇到过，这次体检没想到转氨酶太高了，我原本以为自己非常健康的。后来去门诊看了一下医生，还排查了一下病毒，好在没什么事情，医生说应该是长期熬夜、体重超重和不规律饮食引起的，开了一些护肝药给我，并且给了一些建议。\n什么是转氨酶 内容来自丁香医生1，转氨酶是一系列酶的总称，主要包括丙氨酸氨基转移酶（谷丙转氨酶 ALT）、天冬氨酸氨基转移酶（谷草转氨酶 AST）、碱性磷酸酶、谷氨酰基转移酶和乳酸脱氢酶这五种。总的来说，我觉得还是自己的锅。\n拒绝太“肝”  忌滥用药物 忌乱用补品 忌油腻饮食 忌睡眠不规律 忌不规律饮食  我好像除了滥用药物、乱用补品都中招了，我反思了一下，也许还和体重超重有问题。\n我的计划  🏃‍ 慢跑 💪 减脂减重 🛌 作息规律 🍀 拒绝油腻  希望可以自律一点，“自律给我自由”。另外，如果有看到这篇文章的朋友们，如果也有以上恶习，建议改正，拒绝“肝”出来。\n  「丁香医生」转氨酶正常，就代表肝脏功能没有问题吗？作者：尹嘉钰（ https://dxy.com/column/7494 ） \u0026#x21a9;\u0026#xfe0e;\n   ","date":"2020-06-30T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/health-condtion/owen-beard-DK8jXx1B-1c-unsplash.jpg","resource":{},"title":"健康最为重要，记一次体检心得"},{"content":"前言 对于 Hexo 来说，我们使用它来部署博客是因为无后端运维和高速渲染页面等优点。选择一个合适的托管平台对于博客来说十分重要，可以免费使用且稳定高速的平台是不存在的，我们总是需要做出妥协。我使用了 Github Pages、Coding Pages、Gitee Pages、Netlify 和 Vercel 来部署博客，以下为我的使用报告。\n常见托管平台  节点 \nGithub Pages 使用体验：可以与仓库无缝对接，高效部署，但是没用设置国内节点，在国内访问速度较慢，作为一个海外节点还是非常不错的。相对而言，使用 jsdelivr 来加速网站相关文件可以满足基本使用。查看 Github Status，Pages 服务会出现偶尔挂掉的情况，但多数仓库文档、演示等都选择了 Github Pages 服务。\n使用及扩展：提供二级域名，支持域名绑定及免费 SSL 证书。网站内容与仓库保存一致，自动推送。通过使用 Github Actions 具有较强扩展性。\nNetlify 使用体验：Netlify 的节点设置在海外，但 Netlify 的服务速度尚可，国内部分地区可以到达高速服务。在使用 CDN 的情况下，把网站部署在 Netlify 是可以比较好的选择。Vuejs 和 Hexo 的官网都部署在 Netlify 上，其稳定性可想而知。Netlify 虽然拥有付费功能，但是基本上我们需要使用到的服务都免费。\n使用及扩展：提供二级域名，支持域名绑定及免费 SSL 证书。Netlify 支持 Github 或者 Gitlab 等账号登录，如果仓库已经是静态网站文件，每次 Push 到仓库 Netlify 都会自动部署。支持 Build Command，源文件也可以通过提供的环境自动编译或渲染，类似于一款 CI，与 Github Pages 功能相近。\nVercel 使用体验：Vercel 的体验情况总体和 Netlify 相近，节点设置在海外，访问速度尚可。前身是 now.sh，作为一个高质量的静态托管平台，Vercel的使用体验非常好，是一个可选的优秀平台。\n使用及扩展：提供二级域名，支持域名绑定及免费 SSL 证书。支持 Github 或者 Gitlab 等账号登录，如果仓库已经是静态网站文件，每次 Push 到仓库都会自动部署。Vercel 打出了 free forever 的口号，也就是说在非商用的情况下，个人可以永久免费使用。支持设置环境并执行相关命令，自动部署不在话下。\nCoding 使用体验：Coding 是腾讯系的一个国内托管平台，对于人数较少的团体实行免费制度。服务器节点部署在国内，在国内使用访问速度较快。也是国内开放程度比较高的一个代码托管平台了，静态网站功能 Coding 最近改版了一下，相对于之前来说更稳定了一些。\n使用及扩展：提供二级域名，支持域名绑定及免费 SSL 证书。基于 Kubernetes 的持续部署，可以人我们体验到与 DevOps 体系紧密结合的持续部署能力。持续中提供静态网站托管，但是静态网站托管需要实名和绑定手机号。\nGitee 使用体验：Gitee 是一个国内托管平台，对比 coding 来说较为封闭。静态托管功能上拥有较大限制，且无法自动部署，功能残缺。\n使用及扩展：提供二级域名，非付费版不支持自动部署、域名绑定及免费 SSL 证书。如果强制使用 https，可能会造成样式文件失效等问题。\nTCB 使用体验：TCB(Tencent CloudBase）采用 serverless 架构，提供静态托管服务。我的主站就是使用 TCB，相对而言因为付费了，所以效果较好，在全国各地有 CDN 节点，目前使用是因为腾讯的赞助计划，如果赞助计划失效了，价格过高可能会考虑切换平台。空间较大，流量较多，已经充当 CDN 使用了。\n使用及扩展：提供二级域名，支持自动部署及 免费SSL 证书，但是 SSL 证书申请可能需要备案。扩展性较强，可以使用 CLI 工具或者 Tencent CloudBase Github Action 来部署。\n多节点部署方案  \n几个仓库 Hexo 源码仓库 从图中可以看到使用了 Blog-Source 这个仓库为 Hexo 源码仓库，这个仓库有一个使用了两个 Github Actions，一个用来渲染博客文件并推送到 TCB 静态托管平台，一个用来渲染博客文件推送到各个 Git 仓库，理论上一个 Action 也可以完成这些任务，但是便于管理我选择了两个 Action。\n推送至各个 Git 仓库\nname:Deploy to Repo(Github, Coding, Gitee)on:[push]jobs:build:runs-on:ubuntu-latestenv:hTZ:Asia/Shanghaisteps:- name:Checkoutuses:actions/checkout@v2with:ref:master- name:Update Submodulerun:|git submodule init git submodule update --remote- name:Setup Nodeuses:actions/setup-node@v1with:node-version:\u0026#34;10.x\u0026#34;- name:Hexo Generaterun:|rm -f .yarnclean yarn --frozen-lockfile --ignore-engines --ignore-optional --non-interactive --silent --ignore-scripts --production=false rm -rf ./public yarn run hexo clean yarn run hexo generate- name:Hexo Deployenv:SSH_PRIVATE:${{ secrets.SSH_PRIVATE }}GIT_NAME:vinceyingGIT_EMAIL:admin@vicne.pubrun:|mkdir -p ~/.ssh/ echo \u0026#34;$SSH_PRIVATE\u0026#34; | tr -d \u0026#39;\\r\u0026#39; \u0026gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan e.coding.net \u0026gt;\u0026gt; ~/.ssh/known_hosts ssh-keyscan github.com \u0026gt;\u0026gt; ~/.ssh/known_hosts ssh-keyscan gitee.com \u0026gt;\u0026gt; ~/.ssh/known_hosts git config --global user.name \u0026#34;$GIT_NAME\u0026#34; git config --global user.email \u0026#34;$GIT_EMAIL\u0026#34; yarn run hexo deploy推送至 TCB\nname:Deploy to Tencent CloudBaseon:pushjobs:build:runs-on:ubuntu-latestenv:TZ:Asia/Shanghainame:Deploy Hexo Souce Repo to Tencent CloudBasesteps:- name:Checkoutuses:actions/checkout@v2- name:Setup Nodeuses:actions/setup-node@v1with:node-version:\u0026#39;10.x\u0026#39;# NPM 环境及 Hexo 部署- name:NPMrun:npm install- name:Cleanrun:./node_modules/.bin/hexo clean- name:Generaterun:./node_modules/.bin/hexo generate# Deploy static to Tencent CloudBase- name:Deploy static to Tencent CloudBaseid:deployStaticuses:TencentCloudBase/cloudbase-action@v1.1.1with:secretId:${{ secrets.SECRET_ID }}secretKey:${{ secrets.SECRET_KEY }}envId:${{ secrets.ENV_ID }}staticSrcPath:publicGithub 博客页面仓库 这个作为使用 Github Pages 服务的仓库，同时在 Netlify 和 Vercel 的选择为源仓库，在每次推送至本仓库时，Netlify 和 Vercel 都会自动部署新文件。\nCDN 文件仓库 这个仓库作为管理和存放一些需要推送到 CDN 的文件，比如 css 文件、图片和视频等，首先是为了便于管理及通过 Github Actions推送 到 TCB，其次是为了使用 Jsdelivr CDN 服务作为备用 CDN。\n方案优点  高效自动化，利用 Github Actions,每次只要 Push 到 Blog-Souce和Blog-file仓库就可以全仓库和全节点同步。 便于管理文件，当主 CDN 失效后，直接替换 CDN 地址链接即可完成启用备用 CDN，且备份了文件。 多设备管理，当切换设备后，直接在不安装环境的情况下直接 Clone 即可管理博客，但调试方面还是需要安装环境。特别是在 Github 的云端 IDE-Codespace 正式发布后，可以完全通过仓库管理博客。  ","date":"2020-05-26T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/hexo-static/ot5kWZkH97s.jpg","resource":{},"title":"常见静态网站托管平台使用及多节点部署方案"},{"content":"前言 Fluid 是一款很十分优雅的主题，那么写一篇优雅的文章搭配它呢？以下会从几个方面来简述，主要还是做几个推荐。\n文章内容 熟悉 Markdown 语法 对于使用 Hexo 的大多数人来说，相信对 Markdown 的语法不会陌生。熟练掌握 Markdown 语法对我们的写作拥有极大的帮助，这里用少用的表格和脚注来举个例子。至于为什么有些公式、流程图无法渲染，是因为 Markdown 追求简洁式写作，默认渲染器不支持复杂渲染。\n表格    站点 地址 介绍     FluidDocs https://hexo.fluid-dev.com/docs/ Fluid官方文档   Hexo-theme-fluid https://github.com/fluid-dev/hexo-theme-fluid FluidGithub Repo   Fluid Blog https://hexo.fluid-dev.com/ Fluid官方博客    站点|地址|介绍 --|:--:|--: FluidDocs|https://hexo.fluid-dev.com/docs/|Fluid官方文档 Hexo-theme-fluid|https://github.com/fluid-dev/hexo-theme-fluid|FluidGithub Repo Fluid Blog|https://hexo.fluid-dev.com/|Fluid官方博客 脚注(仅默认渲染器可用) 脚注演示1\n脚注演示[^footnote] [^footnote]: 脚注内容演示 善用 HTML 我们可以在 Markdown 中插入一些简单的 HTML 代码或 CSS 片段来获得更多扩展，使得文章内容更具有多样性。以下演示几个简单功能。\n跳转位置演示（跳转位置设置点）\n文字颜色 #519D9E颜色演示\n\u0026lt;span style=\u0026#34;color: #519D9E; \u0026#34;\u0026gt;#519D9E颜色演示\u0026lt;/span\u0026gt;  文字大小 0.7em 文字大小演示\n\u0026lt;span style=\u0026#34;font-size:0.7em;\u0026#34;\u0026gt;0.7em 文字大小演示\u0026lt;/span\u0026gt;  文字位置 内容居中演示\n\u0026lt;p style=\u0026#34;text-align:center\u0026#34;\u0026gt;内容居中演示\u0026lt;/p\u0026gt; # 可以修改 text-align 参数来设置文字位置。  页内跳转 点击到达跳转位置演示\n\u0026lt;a href=\u0026#34;#demo\u0026#34;\u0026gt;点击到达跳转位置演示\u0026lt;/a\u0026gt; # 在需要跳转的地方添加此代码。 \u0026lt;a id=\u0026#34;demo\u0026#34;\u0026gt;跳转位置演示（跳转位置设置点）\u0026lt;/a\u0026gt; # 在跳转位置添加次代码。  综合演示 综合演示 优雅使用 Fluid写文章 \u0026lt;p style=\u0026#34;text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;\u0026#34;\u0026gt; 综合演示 \u0026lt;br\u0026gt; 优雅使用 Fluid写文章 \u0026lt;/p\u0026gt; iframe 页面镶套 iframe 页面镶套可以帮助我们更好的展示一个页面。比如以下演示页面。\n \u0026lt;iframe src=\u0026#34;https://i.vince.pub/\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;500\u0026#34; name=\u0026#34;topFrame\u0026#34; scrolling=\u0026#34;yes\u0026#34; noresize=\u0026#34;noresize\u0026#34; frameborder=\u0026#34;0\u0026#34; id=\u0026#34;topFrame\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; 一些参数说明，width=\u0026quot;100%\u0026quot; 为宽度自适应，高度请根据实际需求跳转，注意移动端页面是否匹配。 scrolling 为滚动条参数。frameborder 为边框参数。noresize 属性规定用户无法调整框架的大小。\ndetails 标签 用于展示代码较多需要折叠或折叠相关内容，以下为演示。summary 填写显示名称。\n Demo ```html 好友申请备注：fluid\n提问之前请先仔细查阅用户文档\n```  \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;Demo\u0026lt;/summary\u0026gt; \u0026lt;p\u0026gt;\u0026lt;b\u0026gt;好友申请备注：fluid\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;b\u0026gt;提问之前请先仔细查阅用户文档\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;img width=\u0026#34;200\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/gh/fluid-dev/static@master/hexo-theme-fluid/wechat.png\u0026#34; alt=\u0026#34;wechat\u0026#34;\u0026gt; \u0026lt;/details\u0026gt; 善用 Tag 组件 Fluid 内置了许多 Tag 组件，包含便签、行内标签、勾选框、按钮和组图，可以使用这些组件来丰富文章内容，具体点击查看官方文档查看，点击跳转到 FluidDoc。\n配图 众所周知，博客好不好看，配图占一半。这里给大家推荐几个我常用找配图的地方。请尊重相关版权协议。\nWallpaper Hub  Wallpaper Hub \n点击跳转到 Wallpaper Hub\nWallhaven  Wallhaven \n点击跳转到 Wallhaven\nUnsplash  Unsplash \n点击跳转到 Unsplash\n  脚注内容演示 \u0026#x21a9;\u0026#xfe0e;\n   ","date":"2020-05-13T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/fluid-write/fluid-write.jpg","resource":{},"title":"个人免费建站，使用 Cloud Studio 建立个人博客"},{"content":"Hexo-Action-TencentCloudBase 通过 Github Actions，使用 Hexo-Action-TencentCloudBase 可以将 Hexo 的源文件部署并推送到 Tencent CloudBase 的静态托管中。\n🚀 使用 由于 Github Pages 在国内的访问速度，可以使用 Tencent CloudBase 来托管相关静态网页。Hexo-Action-TencentCloudBase 可以通过 Github Actions 将 Hexo 的源文件推送到Tencent CloudBase 的静态托管中。显目地址：Hexo-Action-TencentCloudBase\n在仓库中添加 Repo/.github/workflows/tencent.yml ，相关文件即可。更多关于 Github Actions ，请点击这里查看。\n🔐 腾讯云相关输入内容 在项目的 secret 添加 ENV_ID SECRET_ID SECRET_KEY 相关字段。\nSECRET_ID # Required 云开发的访问密钥 secretId\nSECRET_KEY # Required 云开发的访问密钥 secretKey\nENV_ID # Required 云开发的环境 id envId\n✔ 使用内容及灵感来源 实例\ncloudbase-action\naction-hexo\n","date":"2020-05-11T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/hexo-action-tencentcloudbase/richy-great-MAYEkmn7G6E-unsplash.jpg","resource":{},"title":"Hexo-Action-TencentCloudBase"},{"content":"前言 本篇记录在 Fluid 文档中自己 PR 的内容原稿，持续更新中。\n在 Fluid 使用更多图标的详细过程 说明 Fluid 在2020/4/5之前的版本使用的图标库是 FontAwesome，在之后的版本使用 Iconfont。相对而言，Iconfont 更适合我们的使用习惯，但是在 Iconfont 中，没用相关图标库项目共享功能，且主题作者也不能内置全部图标，只内置了部分社交图标，不过据了解，后续会更新更多图标。这篇帖子主要介绍如何引入更多图标，另外内容已经 PR 到 Fluid Doc 中。\n关于 font-class 引用 主题图标使用 font-class 引用，font-class 是 unicode 使用方式的一种变种，比起 unicode 更加便捷和直观。iconfont 支持在线引用和本地引用。以下内容基于 font-class 引用。\n本地应用 首先需要获取图标的 CSS 文件，将文件放到主题目录 \u0026lsquo;source/css\u0026rsquo; 中，在主题配置文件 custom_css 项中添加 CSS 文件路径。\n实例\ncustom_css: /css/custom.css 在相关文件、页面，将 icon- 开头的那行填入 css class 即可。比如： iconfont icon-email 。\nIconfont 在线引用 Iconfont支持用户创建项目来管理和使用图标库，在 图标管理-我的项目 中即可管理和创建项目。将所需图标添加至购物车，再通过购物车添加至所创建的项目中。在项目中可以下载至本地与生成在线链接，Iconfont 支持在阿里云的 CDN 中生成 CSS 或 JS 文件用来调用。\n生成在线链接后，通过自定义 CSS调用，将 icon- 开头的那行填入 css class 即可，例如 iconfont icon-email）。在每次有删减项目中图标库目录时，需要在项目中点击重新生成链接才可生效。\n相关插件推荐 可视化编辑页面与文档 hexo-admin\n加密文章或页面 hexo-blog-encrypt\n常见功能 网站运行时间统计 本段代码来源于网络。在主题目录 fluid/layout/_partial/footer.ejs 文件中对应位置添加相关代码。\n\u0026lt;div\u0026gt; \u0026lt;span id=\u0026#34;timeDate\u0026#34;\u0026gt;载入天数...\u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;times\u0026#34;\u0026gt;载入时分秒...\u0026lt;/span\u0026gt; \u0026lt;script\u0026gt; var now = new Date(); function createtime(){ var grt= new Date(\u0026#34;02/14/2017 00:00:00\u0026#34;);//此处修改你的建站时间或者网站上线时间  now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 ){ hnum = \u0026#34;0\u0026#34; + hnum; } minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 ){ mnum = \u0026#34;0\u0026#34; + mnum; } seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 ){ snum = \u0026#34;0\u0026#34; + snum; } document.getElementById(\u0026#34;timeDate\u0026#34;).innerHTML = \u0026#34;本站安全运行\u0026amp;nbsp\u0026#34;+dnum+\u0026#34;\u0026amp;nbsp天\u0026#34;; document.getElementById(\u0026#34;times\u0026#34;).innerHTML = hnum + \u0026#34;\u0026amp;nbsp小时\u0026amp;nbsp\u0026#34; + mnum + \u0026#34;\u0026amp;nbsp分\u0026amp;nbsp\u0026#34; + snum + \u0026#34;\u0026amp;nbsp秒\u0026#34;; } setInterval(\u0026#34;createtime()\u0026#34;,250); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; 一言 一言在博客网站中非常常见，正如它所说，用代码表达言语的魅力。在页面中，使用直接添加添加如下代码即可。在主题目录 fluid/layout/_partial/footer.ejs 文件中对应位置添加相关代码。以下代码为默认使用示例，如需要定制，请到 hitokoto developer 中查看详情。\n\u0026lt;p id=\u0026#34;hitokoto\u0026#34;\u0026gt;:D 获取中...\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; fetch(\u0026#39;https://v1.hitokoto.cn\u0026#39;) .then(response =\u0026gt; response.json()) .then(data =\u0026gt; { const hitokoto = document.getElementById(\u0026#39;hitokoto\u0026#39;) hitokoto.innerText = data.hitokoto }) .catch(console.error) \u0026lt;/script\u0026gt; 在新建页面添加评论 目前，主题配置文件只能在文章页面添加评论，如果需要在新建的页面添加评论插件，请在打开评论插件的情况下，在文章页面查看评论插件对应的 HTML 代码，并添加到页面的 Markdown 文件中。\n使用 jsDelivr 服务 插入来自 Github 仓库的图片，由于网络情况可能会出现加载慢和无法加载的情况，我们可以使用 jsDelivr 来加速图片文件等媒体文件的加载。\n通常情况下，可以新建一个仓库来存放这些文件，目前已知的有图片、视频和引用的相关文件可以使用，Github 仓库最大上传文件为 25M，请注意文件大小。\n使用方法（文件的绝对地址）\nhttps://cdn.jsdelivr.net/gh/user/repo@version/file 相关实例（博客仓库下 master 分支里 favicon 图片文件）\nhttps://cdn.jsdelivr.net/gh/fluid-dev/hexo-theme-fluid@master/source/img/favicon.png ","date":"2020-04-22T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/fluid-doc-pr/fluid-doc.jpg","resource":{},"title":"Fluid 文档相关 PR 内容原稿"},{"content":"结论 先说结论，如果没有大量的用户基数和对应用开发的扶持，我认为这种独立基于 Android 开发系统的模式，不是很可观。（仅代表个人观点，回答如有错误欢迎指出）\n先来聊聊历史的这种模式 早些年，当 moto 360 一代面世时，很多人都被这种腕间上的智能所吸引。由于没有在国内上市，我们所能购买到的渠道有淘宝、直邮海淘等，这款手表使用 Android Wear（Wear OS 的前身），那时候还没有中国版的 Android Wear ，如果使用一些基础服务都要爬上梯子，这对使用体验和续航会造成很大的影响。之后，Ticwear 适配了 moto 360 一代 ，但是由于它是无线充电，意味着刷表必须拆表，还必须有刷机线。就这样，淘宝也衍生出了代刷业务和直接卖刷好的表。这也是我最早接触到但这种独立开发模式的手表，然而问题出现了，刷了 Ticwear 软件的生态太不如从前，但是可以满足在国内日常使用。\n放眼之前，BAT 都布局过手表系统。百度的 Du Wear、腾讯的 TOS for watch 、阿里巴巴的 Yun OS for watch 。都是这种模式的手表系统，但是现在都已经停摆了。现在，我们常见市面上这种模式的手表系统，就是华米手表的 WOS 。举个不好的例子，土曼手表 T-Ripple 3 也是这种模式，但它的系统体验真的不尽人意， app 体验也非常糟糕，这家公司如今的现状大家都清楚，当然这里我不是否认这种模式，参照观点。因为现在，做好这种模式的公司，体验也还不错，比如华米和华为（华为前期是使用 Android Wear ，现在转变为自己的手表系统），当然还有一家不得不提的大公司三星，搭载 Tizen OS 的智能手表在市场也有一定的份额。除了公司体量以外，我认为用户基数和对应用开发的扶持对体验起到决定性作用。\n另外一种常见的模式 现在的 ticwatch ，使用 Wear OS 和搭配自己客户端来使用。首先，这可能是一种战略选择，出门问问获得过谷歌的投资，和谷歌也有合作，你会发现之前大部分的 Andorid Wear ，大部分语言搜索引擎都是出门问问。其次，在 ticwear 时期，推出过兼容 Android Wear 应用的模式，但是大大提高了功耗。为什么使用 Wear OS 呢？我认为最大的原因是较为强大的生态， Wear OS 经过多年强大但深耕，虽然没有 Apple Watch 那样强大的生态，但还是有些积累。但像微信手表端，我记得很清楚早期 ticwear 要在兼容 Android Wear 应用的模式下使用（因为微信手表端是传输协议是 Wear OS 的私有协议），后来推出了一个魔改网页版微信的应用。\n小米手表也是这种模式，但是语言搜索引擎换成了小爱同学。但你见过 AOSP(Android Open-Source Project) ，却没有 Wear OS Open-Source Project ，这并不是一个开源项目。意味着在设计界面和功能的同时，你必须遵循它的规范和审核，进行OTA必须通过它的审核等。拥有很大的局限性，当然作为一个爱好者，我也不知道 Wear OS 的商业模式是什么，是否付费。\n观点 由于没有使用过 OPPO 的手表，对产品就不做过多的评价，没有使用就没有发言权。基于这种模式下，我认为由于系统的开发有一定自由度，没有较大局限，但是同时也放弃了生态，需要自己去搭建和完善。从 Wear OS 到独立开发系统的华为，再到由独立系统到 Wear OS 的 Ticwatch ，一直使用独立操作系统的三星、华米，新模式下的小米手表（不含小米手表 color ，此款为独立系统），我们都可以看出，有利也有弊，需要厂商按照产品定位和市场战略去选择。\n附加智能手表选购指南 如果是 iPhone 用户，请选择 Apple Watch ；如果是安卓用户，尽量选择自己手机厂商的手表，这样契合度和使用体验都很好；如果自己厂商没有推出手表，尽量选择采用 Wear OS 的手表。\n说明 本文中独立操作系统定义为基于 Andorid（AOSP）开发的手表系统和独立开发系统。\n另外本文之前发表在知乎问题 如何评价网传OPPO 智能手表没用行业通用的 WearOS ，而使用深度定制版的 Android 内核？ 下。\n","date":"2020-04-07T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/smart-watch/android.png","resource":{},"title":"关于智能手表操作系统的一些浅见"},{"content":"Chrome OS 体验与常用环境，或许我们应该对它改观（Pixelbook 体验）。由于文字内容过多，本文为原创，直接给出知乎链接，以后的文章应该会更新到本站。 点击这里查看文章\n","date":"2020-04-05T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/my-chromebook/pixelbook.jpg","resource":{},"title":"Chrome OS 体验与常用环境"},{"content":"由于文字内容过多，不便发布在这里，文章为原创，直接给出知乎链接，以后的文章会更新到本站。（由于 Cloud Studio 已经升级，该方法可能已经失效) 点击这里查看文章\n","date":"2019-07-05T00:00:00Z","exists":true,"isDefault":false,"permalink":"/p/cloud-studio-static/cloud-studio-static.jpg","resource":{},"title":"个人免费建站，使用 Cloud Studio 建立个人博客"}]